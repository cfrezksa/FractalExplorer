#version 330

// --- INPUT PARAMETERS ---
in vec2 vfUV;

// --- OUTPUT PARAMETERS ----
out vec4 FragColor;

// --- COMMON UNIFORM PARAMETERS ---
uniform vec2	screenResolution;			// [ float2 screenResolution ]
uniform mat4	matView;					// [ float16 matView ]
uniform mat4	matProj;					// [ float16 matProj ]
uniform float	eyeShift = 0.0;				// [ float eyeShift 0.0]
uniform vec3	eyeOffset = vec3(0,0,0);	// [ float3 eyeOffset 0.0 0.0 0.0 ]
uniform float	fovScale = 1.0;				// [ float fovScale 1.0]

vec3 rayDirection;
vec3 rayOrigin;

vec3 render(vec3 a, vec3 d);

// --- snip ----

vec3 getEyePoint(mat4 matView)
{
    vec3 rayOrigin = -matView[3].xyz;
    rayOrigin.x += eyeShift; // apply stereo tweak
    return rayOrigin;
}

vec3 getRayDirection(vec2 uv)
{
    float aspect = screenResolution.x / screenResolution.y;
    vec3 dir = vec3(
        uv.x * fovScale * aspect,
        uv.y * fovScale,
        -1.);
    return normalize(dir);
}

void main()
{
    vec2 uv = vfUV;
    rayOrigin = getEyePoint(matView);
    rayDirection = getRayDirection(uv);
    rayDirection.x += matProj[2].x; // asymmetric frustum in x
    rayDirection = normalize(rayDirection);

    rayOrigin *= mat3(matView);
    rayDirection *= mat3(matView);
	
	rayOrigin += eyeOffset;
	
	vec3 col = render(rayOrigin, rayDirection);

	vec3 linear = pow(col, vec3(2.2));
	FragColor = vec4(linear, 1);
}
